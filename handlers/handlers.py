from telegram import KeyboardButton, ParseMode, ReplyKeyboardMarkup, Update
from telegram.error import BadRequest, TelegramError, Unauthorized
from telegram.ext import CallbackContext

from libs.api_client.api_requests import (Mentor, Postcard,
                                          ResponseFormatError, ServerError,
                                          response_mentors, response_postcards)
from utils.format_long_name import format_long_name
from utils.insert_name import insert_name
from utils.long_message import long_message
from utils.start_role import start_role


def handle_errors(update: Update, context: CallbackContext, error: Exception) -> None:
    if isinstance(error, BadRequest):
        update.message.reply_text(
            "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. "
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
    elif isinstance(error, Unauthorized):
        update.message.reply_text("–û—à–∏–±–∫–∞: –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    elif isinstance(error, ResponseFormatError):
        update.message.reply_text(
            "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö. "
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."
        )
    elif isinstance(error, ServerError):
        update.message.reply_text(
            "–û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ."
        )
    else:
        update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞."
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –∑–∞ –ø–æ–º–æ—â—å—é."
        )


def handle_start(update: Update, context: CallbackContext) -> None:
    try:
        user = update.effective_user
        if user is None:
            update.message.reply_text("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        username = user.username
        role = start_role(username)
        keyboard = [
            [KeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—Ç–æ—Ä–æ–≤'),
             KeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç–∫–∏')]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        welcome_message = (
            f"{role}\n\n–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–±—è dvmn –±–æ—Ç.\n\n"
            "–≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—Ç–æ—Ä–æ–≤ dvmn —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–∞–º–∏."
        )
        update.message.reply_text(welcome_message, reply_markup=reply_markup)
    except Exception as error:
        handle_errors(update, context, error)


def handle_mentors(update: Update, context: CallbackContext, mentors: list[Mentor]) -> None:
    if context.user_data is None:
        context.user_data = {}

    if mentors:
        text = "\n".join([
            "üåü *–ù–∞—à–∏ –º–µ–Ω—Ç–æ—Ä—ã:*",
            *[
                f"‚ú® *{num}.* {format_long_name(mentor.name)} ([{mentor.tg_username}](https://t.me/{mentor.tg_username[1:]}))"
                for num, mentor in enumerate(mentors, start=1)
            ]
        ])
        context.user_data['mentors'] = mentors
        context.user_data['awaiting_mentor'] = True
        update.message.reply_text(
            text,
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True
        )
        update.message.reply_text(
            "*–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–µ–Ω—Ç–æ—Ä–∞:*",
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        update.message.reply_text("–°–ø–∏—Å–æ–∫ –º–µ–Ω—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç.\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")


def handle_postcards(update: Update, context: CallbackContext, cards: list[Postcard]) -> None:
    if context.user_data is None:
        context.user_data = {}

    if cards:
        text = "*–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç–∫—Ä—ã—Ç–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:*\n\n"
        for i, card in enumerate(cards, start=1):
            text += f"{i}. *{card.name_ru}* {card.body}\n"
        messages = long_message(text)
        for message in messages:
            update.message.reply_text(
                text=message,
                parse_mode=ParseMode.MARKDOWN
            )
        context.user_data['available_cards'] = cards
        context.user_data['awaiting_card'] = True
    else:
        update.message.reply_text("–°–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç–æ–∫ –ø—É—Å—Ç.\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")


def handle_mentor_choice(update: Update, context: CallbackContext) -> None:
    if context.user_data is None:
        context.user_data = {}

    message_text = update.message.text
    if message_text.isdigit():
        index = int(message_text) - 1
        mentors = context.user_data.get('mentors', [])
        if 0 <= index < len(mentors):
            context.user_data['selected_mentor'] = mentors[index]
            context.user_data['postcards_after_mentor'] = True
            handle_message(update, context)
        else:
            update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –º–µ–Ω—Ç–æ—Ä–∞.")
        context.user_data['awaiting_mentor'] = False
    else:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–µ–Ω—Ç–æ—Ä–∞.")


def handle_card_choice(update: Update, context: CallbackContext) -> None:
    if context.user_data is None:
        context.user_data = {}

    message_text = update.message.text

    if not message_text.isdigit():
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç–∫—Ä—ã—Ç–∫–∏.")
        return

    index = int(message_text) - 1
    cards = context.user_data.get('available_cards')

    if not cards or not (0 <= index < len(cards)):
        update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –æ—Ç–∫—Ä—ã—Ç–∫–∏.")
        return

    selected_card = cards[index]
    selected_mentor = context.user_data.get('selected_mentor')

    if not selected_mentor:
        update.message.reply_text("–ú–µ–Ω—Ç–æ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        return

    try:
        text = insert_name(selected_card.body, selected_mentor.name.first)
        context.bot.send_message(
            chat_id=selected_mentor.tg_chat_id,
            text=text,
            parse_mode=ParseMode.MARKDOWN
        )
        update.message.reply_text("–û—Ç–∫—Ä—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    except TelegramError as e:
        handle_errors(update, context, e)

    context.user_data['awaiting_card'] = False


def handle_show_mentors(update: Update, context: CallbackContext) -> None:
    mentors_data = response_mentors()
    handle_mentors(update, context, mentors_data)


def handle_show_postcards(update: Update, context: CallbackContext) -> None:
    cards_data = response_postcards()
    handle_postcards(update, context, cards_data)


def handle_message(update: Update, context: CallbackContext) -> None:
    try:
        if context.user_data is None:
            context.user_data = {}

        text = update.message.text
        if text == '–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—Ç–æ—Ä–æ–≤':
            handle_show_mentors(update, context)
        elif text == '–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç–∫–∏' or context.user_data.get(
                'postcards_after_mentor', False):
            handle_show_postcards(update, context)
            context.user_data['postcards_after_mentor'] = False
        elif context.user_data.get('awaiting_mentor', False):
            handle_mentor_choice(update, context)
        elif context.user_data.get('awaiting_card', False):
            handle_card_choice(update, context)
        else:
            handle_start(update, context)
    except Exception as error:
        handle_errors(update, context, error)
