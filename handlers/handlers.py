import logging

from telegram import (
    KeyboardButton,
    ParseMode,
    ReplyKeyboardMarkup,
    Update
)
from telegram.error import (
    BadRequest,
    TelegramError,
    Unauthorized
)
from telegram.ext import CallbackContext

from libs.api_client.api_requests import (
    ResponseFormatError,
    ServerError,
    get_mentors,
    get_postcards
)
from libs.utils import (
    format_long_name,
    insert_name,
    message_splitter,
    start_role
)


logger = logging.getLogger(__name__)


def handle_errors(update: Update, context: CallbackContext, error: Exception) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏, –≤–æ–∑–Ω–∏–∫–∞—é—â–∏–µ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤."""
    logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: %s", error, exc_info=True)
    if isinstance(error, BadRequest):
        update.message.reply_text(
            "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. "
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
    elif isinstance(error, Unauthorized):
        update.message.reply_text("–û—à–∏–±–∫–∞: –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    elif isinstance(error, ResponseFormatError):
        update.message.reply_text(
            "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö. "
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."
        )
    elif isinstance(error, ServerError):
        update.message.reply_text(
            "–û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ."
        )
    else:
        update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞."
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –∑–∞ –ø–æ–º–æ—â—å—é."
        )


def handle_start(update: Update, context: CallbackContext, mentors_url: str, postcards_url: str) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É `/start` –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

    –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.

    """
    try:
        if context.user_data is None:
            context.user_data = {}

        user = update.effective_user

        if user is None:
            raise BadRequest("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        user_id = user.id
        context.user_data.setdefault(user_id, {})

        keyboard = [
            [KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—Ç–æ—Ä–æ–≤"),
             KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç–∫–∏")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        if context.user_data[user_id].get("awaiting_card") and context.user_data[user_id].get("selected_mentor"):
            logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É.")
            update.message.reply_text(
                "üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...",
                reply_markup=reply_markup
            )
            handle_show_postcards(update, context, postcards_url)

        elif context.user_data[user_id].get("awaiting_mentor"):
            logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É.")
            update.message.reply_text(
                "üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...",
                reply_markup=reply_markup
            )
            handle_show_mentors(update, context, mentors_url)

        else:
            role = start_role(user.username, mentors_url)
            welcome_message = (
                f"{role}\n\n–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–±—è dvmn –±–æ—Ç.\n\n"
                "–≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—Ç–æ—Ä–æ–≤ dvmn —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–∞–º–∏."
            )
            update.message.reply_text(
                welcome_message,
                reply_markup=reply_markup
            )
            context.user_data[user_id] = {"last_action": "–Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã"}

    except Exception as error:
        handle_errors(update, context, error)


def handle_mentors(update: Update, context: CallbackContext, mentors_data: dict) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–µ–Ω—Ç–æ—Ä–æ–≤ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–µ–Ω—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∫–∏."""
    if context.user_data is None:
        context.user_data = {}

    if update.effective_user is None:
        raise BadRequest("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    user_id = update.effective_user.id
    mentors = mentors_data.get("mentors")

    if mentors:
        text = "\n".join(
            ["üåü *–ù–∞—à–∏ –º–µ–Ω—Ç–æ—Ä—ã:*", *[
                f"‚ú® *{num}.* {(
                    format_long_name(mentor.get("name")))} ([{mentor.get("tg_username")}](https://t.me/{mentor.get("tg_username")[1:]}))"
                for num, mentor in enumerate(mentors, start=1)]]
            )

        context.user_data[user_id].update({
            "mentors": [{
                "first_name": mentor.get("name").get("first"),
                "tg_chat_id": mentor.get("tg_chat_id"),
                "tg_username": mentor.get("tg_username")
            } for mentor in mentors],
            "awaiting_mentor": True,
            "last_action": "–≤—ã–±–æ—Ä –º–µ–Ω—Ç–æ—Ä–∞"
        })
        update.message.reply_text(
            text,
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True
        )
        update.message.reply_text(
            "*–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–µ–Ω—Ç–æ—Ä–∞:*",
            parse_mode=ParseMode.MARKDOWN
        )

    else:
        update.message.reply_text("–°–ø–∏—Å–æ–∫ –º–µ–Ω—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç.\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")


def handle_postcards(update: Update, context: CallbackContext, cards_data: dict) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç–æ–∫ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ—Ç–∫—Ä—ã—Ç–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏."""
    if context.user_data is None:
        context.user_data = {}

    if update.effective_user is None:
        raise BadRequest("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    user_id = update.effective_user.id
    cards = cards_data.get("postcards")

    if cards:
        text = "*–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç–∫—Ä—ã—Ç–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:*\n\n"
        for num, card in enumerate(cards, start=1):
            text += f"{num}. *{card.get("name_ru")}* {card.get("body")}\n"

        context.user_data[user_id].update({
            "available_cards": [card.get("body") for card in cards],
            "awaiting_card": True,
            "last_action": "–≤—ã–±–æ—Ä –æ—Ç–∫—Ä—ã—Ç–∫–∏"
        })
        for message in message_splitter(text):
            update.message.reply_text(
                text=message,
                parse_mode=ParseMode.MARKDOWN
            )

    else:
        update.message.reply_text("–°–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç–æ–∫ –ø—É—Å—Ç.\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")


def handle_mentor_choice(update: Update, context: CallbackContext, postcards_url: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–µ–Ω—Ç–æ—Ä–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏."""
    if context.user_data is None:
        context.user_data = {}

    if update.effective_user is None:
        raise BadRequest("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    user_id = update.effective_user.id
    message_text = update.message.text

    if message_text.isdigit():
        index = int(message_text) - 1
        mentors = context.user_data[user_id].get("mentors", [])

        if 0 <= index < len(mentors):
            context.user_data[user_id].update({
                "selected_mentor": mentors[index],
                "awaiting_mentor": False,
                "awaiting_card": True
            })
            update.message.reply_text(f"‚úÖ –í—ã–±—Ä–∞–ª–∏: {mentors[index]["first_name"]}")
            handle_show_postcards(update, context, postcards_url)
        else:
            update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –º–µ–Ω—Ç–æ—Ä–∞.")
    else:
        update.message.reply_text("üî¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–µ–Ω—Ç–æ—Ä–∞.")


def handle_card_choice(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ—Ç–∫—Ä—ã—Ç–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–µ–Ω—Ç–æ—Ä—É."""
    if context.user_data is None:
        context.user_data = {}

    if update.effective_user is None:
        raise BadRequest("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    user_id = update.effective_user.id
    user_data = context.user_data.get(user_id, {})

    try:
        index = int(update.message.text) - 1
        cards = user_data.get("available_cards", [])
        mentor = user_data.get("selected_mentor")

        if not mentor:
            update.message.reply_text("‚ùå –ú–µ–Ω—Ç–æ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω!")
            return

        if 0 <= index < len(cards):
            context.bot.send_message(
                chat_id=mentor["tg_chat_id"],
                text=insert_name(cards[index], mentor["first_name"]),
                parse_mode=ParseMode.MARKDOWN
            )
            update.message.reply_text("üéâ –û—Ç–∫—Ä—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
            context.user_data[user_id].clear()
        else:
            update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –æ—Ç–∫—Ä—ã—Ç–∫–∏.")
    except TelegramError as e:
        handle_errors(update, context, e)


def handle_show_mentors(update: Update, context: CallbackContext, mentors_url: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–µ–Ω—Ç–æ—Ä–æ–≤."""
    mentors_data = get_mentors(mentors_url)
    handle_mentors(update, context, mentors_data)


def handle_show_postcards(update: Update, context: CallbackContext, postcards_url: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç–∫—Ä—ã—Ç–æ–∫."""
    cards_data = get_postcards(postcards_url)
    handle_postcards(update, context, cards_data)


def handle_message(update: Update, context: CallbackContext, mentors_url: str, postcards_url: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    try:
        if context.user_data is None:
            context.user_data = {}

        if update.effective_user is None:
            raise BadRequest("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        user_id = update.effective_user.id
        user_data = context.user_data.get(user_id, {})

        text = update.message.text

        if text == "–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—Ç–æ—Ä–æ–≤":
            handle_show_mentors(update, context, mentors_url)
        elif text == "–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç–∫–∏":
            handle_show_postcards(update, context, postcards_url)
        elif user_data.get("awaiting_mentor"):
            handle_mentor_choice(update, context, postcards_url)
        elif user_data.get("awaiting_card"):
            handle_card_choice(update, context)
        else:
            handle_start(update, context, mentors_url, postcards_url)

    except Exception as error:
        handle_errors(update, context, error)
